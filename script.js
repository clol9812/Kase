'use strict';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CASES = [
    {
        id: 1,
        name: "üî• –ì–æ—Ä—è—á–∏–π –∫–µ–π—Å",
        price: 200,
        image: "case.png",
        items: [
            { name: "–û–±—ã—á–Ω—ã–π –Ω–æ–∂", price: 150, rare: 1, image: "knife1.png" },
            { name: "–ó–æ–ª–æ—Ç–æ–π –ø–∏—Å—Ç–æ–ª–µ—Ç", price: 500, rare: 3, image: "pistol_gold.png" },
            { name: "–≠–ø–∏—á–µ—Å–∫–∏–π –º–µ—á", price: 1200, rare: 4, image: "sword_epic.png" },
            { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —â–∏—Ç", price: 2500, rare: 5, image: "shield_legendary.png" }
        ]
    }
];

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
    balance: 5000,
    inventory: [],
    isProcessing: false,
    currentView: 'cases'
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const dom = {
    balance: document.getElementById('balance'),
    caseGrid: document.getElementById('caseGrid'),
    inventoryGrid: document.getElementById('inventoryGrid'),
    preloader: document.getElementById('preloader'),
    viewToggle: document.getElementById('viewToggle')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function init() {
    renderCases();
    updateBalance();
    addTouchListeners();
}

// –†–µ–Ω–¥–µ—Ä –∫–µ–π—Å–æ–≤
function renderCases() {
    dom.caseGrid.innerHTML = CASES.map(caseItem => `
        <div class="case-card" data-case-id="${caseItem.id}">
            <img src="${caseItem.image}" class="case-image" alt="${caseItem.name}">
            <h3>${caseItem.name}</h3>
            <p>üí∞ ${caseItem.price}</p>
            <button onclick="handleOpenCase(${caseItem.id})">
                –û—Ç–∫—Ä—ã—Ç—å
            </button>
        </div>
    `).join('');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
async function handleOpenCase(caseId) {
    if (state.isProcessing) return;
    
    const caseItem = CASES.find(c => c.id === caseId);
    if (!caseItem || state.balance < caseItem.price) {
        showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
        return;
    }

    try {
        state.isProcessing = true;
        showLoader();
        
        state.balance -= caseItem.price;
        updateBalance();
        
        const item = getRandomItem(caseItem.items);
        await simulateSpinAnimation(item);
        
        state.inventory.push(item);
        updateInventory();
        showResult(item);
    } finally {
        state.isProcessing = false;
        hideLoader();
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
function getRandomItem(items) {
    const weights = [50, 30, 15, 4, 1];
    const total = weights.reduce((a, b) => a + b);
    const random = Math.random() * total;

    let cumulative = 0;
    for (let i = 0; i < weights.length; i++) {
        cumulative += weights[i];
        if (random <= cumulative) {
            return items.find(item => item.rare === i + 1) || items[0];
        }
    }
    return items[0];
}

// –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è
async function simulateSpinAnimation(item) {
    return new Promise(resolve => {
        dom.preloader.style.display = 'flex';
        setTimeout(() => {
            dom.preloader.style.display = 'none';
            resolve();
        }, 1500);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateBalance() {
    dom.balance.textContent = state.balance;
}

function updateInventory() {
    dom.inventoryGrid.innerHTML = state.inventory.map((item, index) => `
        <div class="item-card">
            <img src="${item.image}" class="item-image" alt="${item.name}">
            <h4>${item.name}</h4>
            <p>üíé ${item.price}</p>
            <button onclick="sellItem(${index})">
                –ü—Ä–æ–¥–∞—Ç—å
            </button>
        </div>
    `).join('');
}

// –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
function sellItem(index) {
    const item = state.inventory[index];
    if (item && confirm(`–ü—Ä–æ–¥–∞—Ç—å ${item.name} –∑–∞ $${item.price}?`)) {
        state.balance += item.price;
        state.inventory.splice(index, 1);
        updateBalance();
        updateInventory();
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞
function toggleView() {
    const casesSection = document.querySelector('.cases-section');
    const inventorySection = document.querySelector('.inventory-section');
    
    casesSection.classList.toggle('active');
    inventorySection.classList.toggle('active');
    
    dom.viewToggle.textContent = state.currentView === 'cases' ? '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å' : '–ö–µ–π—Å—ã';
    state.currentView = state.currentView === 'cases' ? 'inventory' : 'cases';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoader() {
    dom.preloader.style.display = 'flex';
}

function hideLoader() {
    dom.preloader.style.display = 'none';
}

function showError(message) {
    alert(message);
}

function showResult(item) {
    const resultHTML = `
        <div class="result-popup">
            <h2>üéâ ${item.name}</h2>
            <p>–ü–æ–ª—É—á–µ–Ω–æ: $${item.price}</p>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', resultHTML);
    setTimeout(() => document.querySelector('.result-popup')?.remove(), 2000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Å–∞–Ω–∏–π
function addTouchListeners() {
    document.querySelectorAll('button').forEach(btn => {
        btn.addEventListener('touchstart', (e) => {
            e.preventDefault();
            btn.classList.add('active');
        });
        
        btn.addEventListener('touchend', () => {
            btn.classList.remove('active');
        });
    });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', init);
